#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${KHAL_GREP_COMMAND_JOINER=|}
: ${KHAL_GREP_DATERANGE:=3 months ago}
: ${ENGINEERINGDAY_SECONDS:=$((6 * 3600))}
: ${ENGINEERINGWEEK_SECONDS:=$((ENGINEERINGDAY_SECONDS * 5))}
: ${ENGINEERING_PREFIX:=e}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [KHAL_GREP_DATERANGE=START_DATE] %q %s\n' "$(basename "$1")" '[--process PROCESSING-COMMAND [--process ...]] [KHAL-ARGS ...] [GREP-ARGS ...] PATTERN [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show all events in the past ${KHAL_GREP_DATERANGE} that match PATTERN, followed
by a summary of the total duration and date range in which they were scheduled.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --process PROCESSING-COMMAND
			Transform the result via PROCESSING-COMMAND.
HELPTEXT
}

typeset -a grepArgs=()
typeset -a khalMainArgs=()
typeset -a khalListArgs=()
unset processingCommands
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	# Use color for grep, not khal, as that would likely interfere with the
	# grepping.
	--color)	shift; grepArgs+=(--color=always);;
	--no-color)	shift; grepArgs+=(--color=never);;

	-[vlc])		khalMainArgs+=("$1" "${2?}"); shift; shift;;
	--@(verbosity|logfile|config))
			khalMainArgs+=("$1" "${2?}"); shift; shift;;
	-[ad])		khalListArgs+=("$1" "${2?}"); shift; shift;;
	--@(include-calendar|exclude-calendar))
			khalListArgs+=("$1" "${2?}"); shift; shift;;
	--process)	shift; processingCommands+="${processingCommands:+ $KHAL_GREP_COMMAND_JOINER }$1"; shift;;
	--)		grepArgs+=("$1"); shift; break;;
	*)		grepArgs+=("$1"); shift;;
    esac
done
if [ ${#grepArgs[@]} -eq 0 -a $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
: ${processingCommands="fieldMap 3 '|secondsToDuration --unbuffered --width 6'"}

getFifo()
{
    local i tempFifo
    for ((i = 0; i < 5; i++))
    do
	tempFifo="$(mktemp --dry-run --tmpdir="${XDG_RUNTIME_DIR:-/tmp}" "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${XDG_RUNTIME_DIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
	if mkfifo -m 600 "$tempFifo" 2>/dev/null; then	# mkfifo fails when the file already exists; this handles the race condition.
	    printf %s "$tempFifo"
	    return 0
	fi
    done
    return 1
}
summarizeSetup()
{
    local summaryFifo; summaryFifo="$(getFifo)" || exit $?
    exec 3<>"$summaryFifo"
    rm -- "$summaryFifo" # Unlink the named pipe.

    local startEndFifo; startEndFifo="$(getFifo)" || exit $?
    exec 4<>"$startEndFifo"
    rm -- "$startEndFifo" # Unlink the named pipe.
}
startEndPipeline()
{
    tee >(headtail -n 1 --duplicate-if-short | field 1 | outputOrPrintf \\n\\n >&4)
}
summarizePipeline()
{
    tee >(sumField 3 | outputOrPrintf \\n >&3)
}
summarizeProcessing()
{
    local IFS=$'\n' summarySeconds start end dateDiff range
    read summarySeconds <&3
    { read start; read end; } <&4
    exec 3>&- 4>&-

    [ -n "$summarySeconds" -a -n "$start" -a -n "$end" ] || return

    if [ "$start" = "$end" ]; then
	dateDiff='one day'
	range="on $start"
    else
	dateDiff="$(datediff --output best-unit "$start" "$end")"
	range="from $start until $end"
    fi

    printf -- '--\nTotal effort: %s (%s) over %s (%s)\n' \
	"$(WORKDAY_SECONDS=$ENGINEERINGDAY_SECONDS WORKWEEK_SECONDS=$ENGINEERINGWEEK_SECONDS WORK_PREFIX="$ENGINEERING_PREFIX" secondsToDuration --workday --precision Ud -- "$summarySeconds")" \
	"$(secondsToDuration --precision Uh -- "$summarySeconds")" \
	"$dateDiff" \
	"$range"
}


summarizeSetup
khal-wrapper "${khalMainArgs[@]}" --no-color list "${khalListArgs[@]}" --day-format '' --format '{start-date-long} {start-time} {end-date-long} {end-time} {title}' "${KHAL_RANGE_START:-$(date --date "${KHAL_GREP_DATERANGE:?}" +%F)}" "${KHAL_RANGE_END:-today}" \
    | grep "${grepArgs[@]}" "$@" \
    | reldate --relative-to-first --difference \
    | startEndPipeline \
    | eval 'summarizePipeline' \
    "${processingCommands:+|}$processingCommands"

summarizeProcessing
